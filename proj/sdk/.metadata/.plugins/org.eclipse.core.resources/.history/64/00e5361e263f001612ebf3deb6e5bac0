/*
 * Copyright (c) 2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#include <stdio.h>

#define PR_BIN_SIZE 0x00033148

int partial_prefetch_bin();

int main()
{
    printf("Hello World\n");

    return 0;
}

int filter_prefetch_bin() {
    char file_name[128];
    int fd;
    int ret;
    unsigned int i;

    for (i = 0; i < ARRAY_SIZE(filter_types); ++i) {
        if (filter_types[i].pr_file_name[0] != '\0') {
            // compose file name
            sprintf(file_name, "/media/card/partial/%s", filter_types[i].pr_file_name);

            // open partial bitfile
            fd = open(file_name, O_RDONLY);
            if (fd < 0) {
                printf("failed to open partial bitfile %s\n", file_name);
                return -1;
            }

            // read partial bitfile into buffer
            ret = read(fd, filter_types[i].pr_buf, FILTER_PR_BIN_SIZE);
            if (ret < 0) {
                printf("failed to read partial bitfile %s\n", file_name);
                close(fd);
                return -1;
            }

            // close file handle
            close(fd);
        }
    }

    return 0;
}
